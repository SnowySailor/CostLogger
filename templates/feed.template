<style>
.transactionlist {
    width:500px;
    margin-left:auto;
    margin-right:auto;
}

.transactioncontainer {
    margin-bottom:20px;
    background-color:#555;
}

.transactionuserscontainer {
    background-color:#777;
}

.userlabel, .involveduserslabel {
    display:inline-block;
}

.deletebtncontainer, .actionbtncontainer {
    display:inline-block;
    float:right;
}

.actionbtn {
    width:30px;
    height:30px;
    font-weight:bolder;
    border-radius:15px;
    border:none;
    margin-right:5px;
}
</style>
<div class="hidden" id="all_users" data-user-json="{{.UsersJSON}}"></div>
<div class="feedheader">
    <h2>Transactions</h2>
    <button type="button" onclick="onclickAddTransaction()">Add Transaction</button>
</div>
<div id="transactionlist" class="transactionlist">
    {{range .Transactions}}
    <div class="transactioncontainer" id="transaction_{{.Id}}_container">
        <div class="deletebtncontainer"><button onclick="onclickDeleteTransaction({{.Id}})" class="actionbtn">x</button></div>
        <div class="actionbtncontainer"><button id="transaction_{{.Id}}_action_btn" onclick="onclickEditTransaction({{.Id}})" class="actionbtn">e</button></div>
        <div class="userlabel">User: {{.UserId}}</div>
        <div id="transaction_{{.Id}}_fields_container">
            <div id="transaction_{{.Id}}_amount" data-amount="{{.Amount}}" class="amountlabel">Amount: ${{.Amount.FlintToString 2 2}}</div>
            <div id="transaction_{{.Id}}_comments" data-comments="{{.Comments}}" class="commentslabel">Comments: {{if .Comments}}{{.Comments}}{{else}}(none){{end}}</div>
        </div>
        <div class="transactionuserscontainer" id="transaction_{{.Id}}_users_container">
            {{if .InvolvedUsers}}
            <div class="actionbtncontainer"><button id="transaction_{{.Id}}_users_action_btn"onclick="onclickEditInvolvedUsers({{.Id}})" class="actionbtn">e</button></div>
            {{end}}
            <div class="involveduserslabel">Involved Users</div>
            <div id="transaction_{{.Id}}_users_list">
                {{range .InvolvedUsers}}
                <div class="transactionuser">
                    <div data-user="{{.UserId}}" class="userlabel">User: {{.UserId}}</div>
                    <div data-percentage="{{.PercentInvolvement}}" class="percentagelabel">Percentage: {{.PercentInvolvement.FlintToString 2 2}}%%</div>
                </div>
                {{end}}
            </div>
            <div id="transaction_{{.Id}}_add_btn_container">
                {{if not .InvolvedUsers}}
                <button type="button" id="transaction_{{.Id}}_add_btn" onclick="onclickAddUser({{.Id}})">Add Involved Users</button>
                {{end}}
            </div>
        </div>
    </div>
    {{end}}
</div>
<script type="text/javascript">
    window.addEventListener('load', loadAllUsers());
    function loadAllUsers() {
        G.AllUsers = parseJSON(getElement('all_users').getAttribute('data-user-json'), []);
    }

    function getTransactionFromDOM(transactionId) {
        var userListContainer = getElement('transaction_' + transactionId.toString() + '_users_list');
        var transaction = {};
        var amount      = 0;
        var comments    = '';

        // Get the amount
        var amountInput = getElement('transaction_' + transactionId.toString() + '_amount');
        if (!amountInput) { return; }
        if (hasClass(amountInput, 'amountlabel')) {
            amount = amountInput.getAttribute('data-amount');
        } else if (hasClass(amountInput, 'amountinput')) {
            amount = getValue(amountInput);
            amount = stringToFlint(amount);
        }

        // Get the comments
        var commentsInput = getElement('transaction_' + transactionId.toString() + '_comments');
        if (!commentsInput) { return; }
        if (hasClass(commentsInput, 'commentslabel')) {
            comments = commentsInput.getAttribute('data-comments');
        } else if (hasClass(commentsInput, 'commentsinput')) {
            comments = getValue(commentsInput);
        }

        // Get the users
        var userList = [];
        var userListElements = getElementChildren(userListContainer);
        for (var i = 0; i < userListElements.length; i++) {
            var userToAdd    = {};
            var user         = userListElements[i];
            var userChildren = getElementChildren(user);
            var percent      = 0;
            var userid       = 0;

            for (var j = 0; j < userChildren.length; j++) {
                var userChild = userChildren[j];
                if (hasClass(userChild, 'userinput')) {
                    userid = getValue(userChild);
                } else if (hasClass(userChild, 'percentageinput')) {
                    percent = getValue(userChild);
                    percent = stringToFlint(percent);
                } else if (hasClass(userChild, 'userlabel')) {
                    userid = userChild.getAttribute('data-user');
                } else if (hasClass(userChild, 'percentagelabel')) {
                    percent = userChild.getAttribute('data-percentage');
                }
            }

            userToAdd.UserId             = toInt(userid);
            userToAdd.PercentInvolvement = toInt(percent);

            userList.push(userToAdd);
        }

        for (var i = 0; i < userList.length; i++) {
            var userToAdd = userList[i];
            // Error checking
            if (!userToAdd.UserId || !userToAdd.PercentInvolvement) {
                // TODO: Error
            }
        }

        if (!amount) {
            // TODO: Error
        }

        transaction.Amount        = toInt(amount);
        transaction.Comments      = comments;
        transaction.InvolvedUsers = userList;
        return transaction;
    }

    function populateDOMTransaction(transactionId, transaction) {
        if (!transaction) { return; }
        var transactionContainer = getElement('transaction_' + transactionId.toString() + '_container');
        if (!transactionContainer) { return; }

        var deleteButtonContainer      = document.createElement('DIV');
        var deleteButton               = document.createElement('BUTTON');
        var actionButtonContainer      = document.createElement('DIV');
        var actionButton               = document.createElement('BUTTON');
        var userLabel                  = document.createElement('DIV');
        var transactionFieldsContainer = document.createElement('DIV');
        var transactionAmount          = document.createElement('DIV');
        var transactionComments        = document.createElement('DIV');
        var transactionUsersContainer  = document.createElement('DIV');
        var usersActionButtonContainer = document.createElement('DIV');
        var usersActionButton          = document.createElement('BUTTON');
        var involvedUsersLabel         = document.createElement('DIV');
        var involvedUsersList          = document.createElement('DIV');
        var addInvolvedUsersContainer  = document.createElement('DIV');
        var addInvolvedUsersButton     = document.createElement('BUTTON');

        addClassToElem(deleteButtonContainer     , 'deletebtncontainer');
        addClassToElem(actionButtonContainer     , 'actionbtncontainer');
        addClassToElem(deleteButton              , 'actionbtn');
        addClassToElem(actionButton              , 'actionbtn');
        addClassToElem(userLabel                 , 'userlabel');
        addClassToElem(transactionComments       , 'commentslabel');
        addClassToElem(transactionAmount         , 'amountlabel');
        addClassToElem(transactionUsersContainer , 'transactionuserscontainer');
        addClassToElem(usersActionButtonContainer, 'actionbtncontainer');
        addClassToElem(usersActionButton         , 'actionbtn');
        addClassToElem(involvedUsersLabel        , 'involveduserslabel');

        deleteButton.type      = 'button';
        deleteButton.innerHTML = 'x';
        deleteButton.setAttribute('onclick', 'onclickDeleteTransaction(' + transactionId.toString() + ')');

        actionButton.id        = 'transaction_' + transactionId.toString() + '_action_btn';
        actionButton.type      = 'button';
        actionButton.innerHTML = 'e';
        actionButton.setAttribute('onclick', 'onclickEditTransaction(' + transactionId.toString() + ')');

        userLabel.innerHTML = 'User: ' + transaction.UserId;

        transactionFieldsContainer.id = 'transaction_' + transactionId.toString() + '_fields_container';

        transactionComments.id        = 'transaction_' + transactionId.toString() + '_comments';
        transactionComments.innerHTML = 'Comments: ' + (transaction.Comments || '(none)');
        transactionComments.setAttribute('data-comments', transaction.Comments);

        transactionAmount.id        = 'transaction_' + transactionId.toString() + '_amount';
        transactionAmount.innerHTML = 'Amount: $' + flintToString(transaction.Amount);
        transactionAmount.setAttribute('data-amount', transaction.Amount);

        transactionUsersContainer.id = 'transaction_' + transactionId.toString() + '_users_container';

        usersActionButton.id        = 'transaction_' + transactionId.toString() + '_users_action_btn';
        usersActionButton.innerHTML = 'e';
        usersActionButton.setAttribute('onclick', 'onclickEditInvolvedUsers(' + transactionId.toString() + ')');

        involvedUsersList.id = 'transaction_' + transactionId.toString() + '_users_list';

        addInvolvedUsersContainer.id = 'transaction_' + transactionId.toString() + '_add_btn_container';

        addInvolvedUsersButton.id        = 'transaction_' + transactionId.toString() + '_add_btn';
        addInvolvedUsersButton.type      = 'button';
        addInvolvedUsersButton.innerHTML = 'Add Involved Users';
        addInvolvedUsersButton.setAttribute('onclick', 'onclickAddUser(' + transactionId.toString() + ')');

        involvedUsersLabel.innerHTML = 'Involved Users';

        var usersToPopulate = [];
        for (var i = 0; i < transaction.InvolvedUsers.length; i++) {
            var user            = transaction.InvolvedUsers[i];
            var userContainer   = document.createElement('DIV');
            var tUserLabel      = document.createElement('DIV');
            var percentageLabel = document.createElement('DIV');

            tUserLabel.innerHTML = 'User: ' + user.UserId;
            tUserLabel.setAttribute('data-user', user.UserId);
            addClassToElem(tUserLabel, 'userlabel');

            percentageLabel.innerHTML = 'Percentage: ' + flintToString(user.PercentInvolvement) + '%%';
            percentageLabel.setAttribute('data-percentage', user.PercentInvolvement);
            addClassToElem(percentageLabel, 'percentagelabel');

            userContainer.appendChild(tUserLabel);
            userContainer.appendChild(percentageLabel);
            usersToPopulate.push(userContainer);
        }

        // Build DOM
        removeAllChildren(transactionContainer);

        for (var i = 0; i < usersToPopulate.length; i++) {
            involvedUsersList.appendChild(usersToPopulate[i]);
        }

        transactionFieldsContainer.appendChild(transactionAmount);
        transactionFieldsContainer.appendChild(transactionComments);

        if (usersToPopulate.length == 0) {
            addInvolvedUsersContainer.appendChild(addInvolvedUsersButton);
        }

        deleteButtonContainer.appendChild(deleteButton);
        actionButtonContainer.appendChild(actionButton);
        usersActionButtonContainer.appendChild(usersActionButton);

        if (usersToPopulate.length > 0) {
            transactionUsersContainer.appendChild(usersActionButtonContainer);
        }
        transactionUsersContainer.appendChild(involvedUsersLabel);
        transactionUsersContainer.appendChild(involvedUsersList);
        transactionUsersContainer.appendChild(addInvolvedUsersContainer);

        transactionContainer.appendChild(deleteButtonContainer);
        transactionContainer.appendChild(actionButtonContainer);
        transactionContainer.appendChild(userLabel);
        transactionContainer.appendChild(transactionFieldsContainer);
        transactionContainer.appendChild(transactionUsersContainer);
    }

    function makeUserWithInputs(transactionId, userValue, percentValue) {
        var newUserSelectHasValue = false;
        var newUserWithInputs = document.createElement('DIV');
        var newUserSelect     = document.createElement('SELECT');
        var newPercentInput   = document.createElement('INPUT');
        var deleteButton      = document.createElement('BUTTON');

        addClassToElem(newUserWithInputs, 'transactionuser');
        addClassToElem(newUserSelect    , 'userinput');
        addClassToElem(newPercentInput  , 'percentageinput');
        addClassToElem(deleteButton     , 'userdeletebtn');

        // Set up new percent input with limitations for resolution and range
        newPercentInput.type        = 'number';
        newPercentInput.min         = '0';
        newPercentInput.max         = '100';
        newPercentInput.step        = '0.01';
        newPercentInput.placeholder = 'Percentage';
        if (percentValue) { setValue(newPercentInput, flintToString(percentValue)); }

        deleteButton.type      = 'button';
        deleteButton.innerHTML = 'x'
        deleteButton.setAttribute('onclick', 'onclickDeleteTransactionUser(' + transactionId.toString() + ',event)');

        // Get all userids that have been selected already
        var existingUserIds = getSelectedOrUsedUsers(transactionId);
        // Get all application users
        var users           = getAllUsers();
        for (var i = 0; i < users.length; i++) {
            var user = users[i];

            // Set up the new option with user info
            var newOption       = document.createElement('OPTION');
            newOption.innerHTML = user.DisplayName;
            setValue(newOption, user.Id.toString());
            newUserSelect.appendChild(newOption);

            // If the user isn't already used and the dropdown has no selected option,
            // set the value to the user we just added
            if ((userValue && userValue == user.Id) || (!isInList(user.Id, existingUserIds) && !newUserSelectHasValue)) {
                setValue(newUserSelect, user.Id.toString());
                newUserSelectHasValue = true;
            }
        }
        newUserSelect.setAttribute('onchange', 'onchangeUserSelect(' + transactionId.toString() + ')');

        // Add all new elements to DOM
        newUserWithInputs.appendChild(newUserSelect);
        newUserWithInputs.appendChild(newPercentInput);
        newUserWithInputs.appendChild(deleteButton);

        return newUserWithInputs;
    }

    function onclickAddUser(transactionId) {
        var userContainer = getElement('transaction_' + transactionId.toString() + '_users_list');
        if (!userContainer) { return; }

        var newUserWithInputs = makeUserWithInputs(transactionId);
        userContainer.appendChild(newUserWithInputs);

        // Update all the options that the user has
        // (a new user was just added, so we want to remove that new user from their options)
        onchangeUserSelect(transactionId);

        // Change the add button from 'Add Involved Users' to just a '+'
        var addButton       = getElement('transaction_' + transactionId.toString() + '_add_btn');
        addButton.innerHTML = '+';

        // If we've selected all users, hide the add button
        showAddUserButtonIfNeeded(transactionId);
    }

    function onclickDeleteTransactionUser(transactionId, event) {
        if (!event.currentTarget || !event.currentTarget.parentElement) { return; }
        removeElement(event.currentTarget.parentElement);
        onchangeUserSelect(transactionId);
        showAddUserButtonIfNeeded(transactionId);
    }

    function getSelectedOrUsedUsers(transactionId) {
        var existingUsers = getElementChildrenById('transaction_' + transactionId.toString() + '_users_list');
        var userIds = [];
        // Get users that existed on page load
        for (var i = 0; i < existingUsers.length; i++) {
            var existingUser = existingUsers[i];
            user = existingUser.getElementsByClassName('userlabel');
            if (user.length != 1) { continue; }
            userIds.push(toInt(user[0].getAttribute('data-user')));
        }
        // Get users that were added after page load
        for (var i = 0; i < existingUsers.length; i++) {
            var existingUser = existingUsers[i];
            user = existingUser.getElementsByClassName('userinput');
            if (user.length != 1) { continue; }
            userIds.push(toInt(getValue(user[0])));
        }
        return userIds;
    }

    function onchangeUserSelect(transactionId) {
        // Get all users that are selected or populated
        var existingUserIds = getSelectedOrUsedUsers(transactionId);
        var existingUsers   = getElementChildrenById('transaction_' + transactionId.toString() + '_users_list');

        // Loop over users that were added after page load
        for (var i = 0; i < existingUsers.length; i++) {
            var existingUser  = existingUsers[i];
            var currentSelect = existingUser.getElementsByClassName('userinput');
            if (currentSelect.length != 1) { continue; }

            // Process the current select
            currentSelect = currentSelect[0];
            // Get the options for the select
            var options = getElementChildren(currentSelect);
            for (var j = 0; j < options.length; j++) {
                var option = options[j];
                // We want to hide the option from the user if the user is currently used elsewhere
                // and the user we are inspecting is NOT already selected by this current dropdown
                if (getValue(currentSelect) != getValue(option) && isInList(toInt(getValue(option)), existingUserIds)) {
                    hideElem(option);
                } else {
                    showElem(option);
                }
            }
        }
    }

    function onclickDeleteTransaction(transactionId) {
        var c = confirm('Are you sure you want to delete this transaction?');
        // TODO: call delete transaction
        if (c) {
            var transaction = getElement('transaction_' + transactionId.toString() + '_container');
            removeElement(transaction);
        }
    }

    function onclickEditTransaction(transactionId) {
        var transactionActionButton = getElement('transaction_' + transactionId.toString() + '_action_btn');
        var transactionContainer    = getElement('transaction_' + transactionId.toString() + '_fields_container');
        var containerChildren       = getElementChildren(transactionContainer);

        var amount   = '';
        var comments = '';

        for (var i = 0; i < containerChildren.length; i++) {
            var child = containerChildren[i];
            if (child.hasAttribute('data-amount')) {
                amount = child.getAttribute('data-amount');
            }
            if (child.hasAttribute('data-comments')) {
                comments = child.getAttribute('data-comments');
            }
        }

        var amountInput   = document.createElement('INPUT');
        var commentsInput = document.createElement('INPUT');

        amountInput.type        = 'number';
        amountInput.id          = 'transaction_' + transactionId.toString() + '_amount';
        amountInput.min         = '0';
        amountInput.step        = '0.01';
        amountInput.placeholder = 'Amount';
        setValue(amountInput, (amount/100).toFixed(2));

        commentsInput.type        = 'text';
        commentsInput.id          = 'transaction_' + transactionId.toString() + '_comments';
        commentsInput.placeholder = 'Comments';
        setValue(commentsInput, comments);

        addClassToElem(amountInput  , 'amountinput');
        addClassToElem(commentsInput, 'commentsinput');

        removeAllChildren(transactionContainer);
        transactionContainer.appendChild(amountInput);
        transactionContainer.appendChild(commentsInput);

        setInnerHTML(transactionActionButton, 's');
        transactionActionButton.setAttribute('onclick', 'onclickSaveTransaction(' + transactionId + ')');
    }

    function onclickEditInvolvedUsers(transactionId) {
        var listToConvert = getElement('transaction_' + transactionId.toString() + '_users_list');

        var usersToPut  = [];
        var usersToEdit = getElementChildren(listToConvert);
        for (var i = 0; i < usersToEdit.length; i++) {
            var user         = usersToEdit[i];
            var userChildren = getElementChildren(user);
            for (var j = 0; j < userChildren.length; j++) {
                var child = userChildren[j];
                if (child.hasAttribute('data-user')) {
                    var userId = child.getAttribute('data-user');
                } else if (child.hasAttribute('data-percentage')) {
                    var percentage = child.getAttribute('data-percentage');
                }
            }
            var userToPut  = makeUserWithInputs(transactionId, userId, percentage);

            usersToPut.push(userToPut);
            removeElement(user);
        }

        for (var i = 0; i < usersToPut.length; i++) {
            listToConvert.appendChild(usersToPut[i]);
        }

        var actionButton = getElement('transaction_' + transactionId.toString() + '_users_action_btn');
        actionButton.innerHTML = 's';
        actionButton.setAttribute('onclick', 'onclickSaveTransaction(' + transactionId + ')');

        var addButtonContainer = getElement('transaction_' + transactionId.toString() + '_add_btn_container');
        if (!addButtonContainer) { return; }

        var addButton       = document.createElement('BUTTON');
        addButton.type      = 'button';
        addButton.id        = 'transaction_' + transactionId.toString() + '_add_btn';
        addButton.innerHTML = '+';
        addButton.setAttribute('onclick', 'onclickAddUser(' + transactionId.toString() + ')');

        addButtonContainer.appendChild(addButton);

        showAddUserButtonIfNeeded(transactionId);
    }

    function showAddUserButtonIfNeeded(transactionId) {
        var users         = getAllUsers();
        var existingUsers = getSelectedOrUsedUsers(transactionId);
        if (existingUsers.length >= users.length) {
            hide('transaction_' + transactionId.toString() + '_add_btn');
        } else {
            show('transaction_' + transactionId.toString() + '_add_btn')
        }
    }

    function onclickAddTransaction() {
        var transactionList      = getElement('transactionlist');
        if (!transactionList) { return; }

        var transactionId        = randomInt(0, 1000000);
        var transactionContainer = document.createElement('DIV');
        var userLabel            = document.createElement('DIV');
        var inputsContainer      = document.createElement('DIV');
        var amountInput          = document.createElement('INPUT');
        var commentsInput        = document.createElement('INPUT');
        var involvedUsersLabel   = document.createElement('DIV');
        var transactionUsers     = document.createElement('DIV');
        var transactionUsersList = document.createElement('DIV');
        var addUsersButton       = document.createElement('BUTTON');
        var saveButtonContainer  = document.createElement('DIV');
        var saveButton           = document.createElement('BUTTON');

        transactionContainer.id = 'transaction_' + transactionId.toString() + '_container';

        userLabel.innerHTML = 'User: Me';

        inputsContainer.id = 'transaction_' + transactionId.toString() + '_fields_container';

        amountInput.id          = 'transaction_' + transactionId.toString() + '_amount';
        amountInput.type        = 'number';
        amountInput.min         = '0';
        amountInput.step        = '0.01';
        amountInput.placeholder = 'Amount';

        commentsInput.id          = 'transaction_' + transactionId.toString() + '_comments';
        commentsInput.type        = 'text';
        commentsInput.placeholder = 'Comments';

        involvedUsersLabel.innerHTML = 'Involved Users';

        transactionUsers.id     = 'transaction_' + transactionId.toString() + '_users_container';
        transactionUsersList.id = 'transaction_' + transactionId.toString() + '_users_list';

        addUsersButton.type      = 'button';
        addUsersButton.innerHTML = 'Add Involved Users';
        addUsersButton.id        = 'transaction_' + transactionId.toString() + '_add_btn';
        addUsersButton.setAttribute('onclick', 'onclickAddUser(' + transactionId.toString() + ')');

        saveButtonContainer.id = 'transaction_' + transactionId.toString() + '_action_btn_container';

        saveButton.type = 'button';
        saveButton.innerHTML = 's';
        saveButton.id = 'transaction_' + transactionId.toString() + '_action_btn';
        saveButton.setAttribute('onclick', 'onclickSaveTransaction(' + transactionId + ')');

        addClassToElem(transactionContainer, 'transactioncontainer');
        addClassToElem(involvedUsersLabel  , 'involveduserslabel');
        addClassToElem(transactionUsers    , 'transactionuserscontainer');
        addClassToElem(saveButton          , 'actionbtn');
        addClassToElem(saveButtonContainer , 'actionbtncontainer');
        addClassToElem(userLabel           , 'userlabel');
        addClassToElem(amountInput         , 'amountinput');
        addClassToElem(commentsInput       , 'commentsinput');

        saveButtonContainer.appendChild(saveButton);
        transactionUsers.appendChild(transactionUsersList);

        inputsContainer.appendChild(amountInput);
        inputsContainer.appendChild(commentsInput);

        transactionContainer.appendChild(saveButtonContainer);
        transactionContainer.appendChild(userLabel);
        transactionContainer.appendChild(inputsContainer);
        transactionContainer.appendChild(involvedUsersLabel);
        transactionContainer.appendChild(transactionUsers);
        transactionContainer.appendChild(addUsersButton);

        transactionList.appendChild(transactionContainer);
    }

    function onclickSaveTransaction(transactionId) {
        var transaction = getTransactionFromDOM(transactionId);
        if (!transaction) {
            // TODO: Error messages
            alert("Error");
        }
        httpPost('transaction/' + transactionId.toString(), JSON.stringify(transaction), function(resp) {
            transactionPostCallback(transactionId, resp);
        });
        populateDOMTransaction(transactionId, transaction);
    }

    function transactionPostCallback(oldTransactionId, response) {
        if (response.Message) {
            var newId = toInt(response.Message);
            if (newId == 0) { showError('Error 2. Transaction not saved.'); return; }
            var transactionContainer = getElement('transaction_' + oldTransactionId.toString() + '_container');
            if (!transactionContainer) { showError('Error 3. Transaction not saved.'); return; }
            replaceIds(transactionContainer, 'transaction_' + oldTransactionId.toString(), 'transaction_' + newId.toString());
            transactionContainer.id = 'transaction_' + newId.toString() + '_container';
        } else {
            showError('Error 3. Transaction not saved.');
        }
    }
</script>