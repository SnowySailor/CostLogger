<style>
.transactionlist {
    width:500px;
    margin-left:auto;
    margin-right:auto;
}

.transactioncontainer {
    margin-bottom:20px;
    background-color:#555;
}

.transactionuserscontainer {
    background-color:#777;
}
</style>
<div class="hidden" id="all_users" data-user-json="{{.UsersJSON}}"></div>
<div id="transactionlist" class="transactionlist">
    {{range .Transactions}}
    <div class="transactioncontainer">
        <div class="userlabel">User: {{.UserId}}</div>
        <div class="amountlabel">Amount: ${{.Amount.FlintToString 2 2}}</div>
        {{if .Comments}}<div class="commentslabel">Comments: {{.Comments}}</div>{{end}}
        <div class="involveduserslabel">Involved Users</div>
        <div class="transactionuserscontainer" id="transactionusers_{{.Id}}">
            {{range .InvolvedUsers}}
            <div class="transactionuser">
                <div data-user="{{.UserId}}" class="userlabel">User: {{.UserId}}</div>
                <div class="percentagelabel">Percentage: {{.PercentInvolvement.FlintToString 2 2}}%%</div>
            </div>
            {{end}}
        </div>
        {{if not (eq (len .InvolvedUsers) $.UserCount)}}
            {{if .InvolvedUsers}}
            <button type="button" id="transaction_{{.Id}}_add_btn" onclick="onclickAddUser({{.Id}})">+</button>
            {{else}}
            <button type="button" id="transaction_{{.Id}}_add_btn" onclick="onclickAddUser({{.Id}})">Add Involved Users</button>
            {{end}}
        {{end}}
    </div>
    {{end}}
</div>
<script type="text/javascript">
    window.addEventListener('load', loadAllUsers());
    function loadAllUsers() {
        G.AllUsers = parseJSON(getElement('all_users').getAttribute('data-user-json'), []);
    }

    function onclickAddUser(transactionId) {
        var userContainer = getElement('transactionusers_' + transactionId.toString());
        if (!userContainer) { return; }
        var newUserSelectHasValue = false;
        var newUserWithInputs = document.createElement('DIV');
        var newUserSelect     = document.createElement('SELECT');
        var newPercentInput   = document.createElement('INPUT');

        addClassToElem(newUserWithInputs, 'transactionuser');
        addClassToElem(newUserSelect    , 'userinput');
        addClassToElem(newPercentInput  , 'percentageinput');

        // Set up new percent input with limitations for resolution and range
        newPercentInput.type        = 'number';
        newPercentInput.min         = '0';
        newPercentInput.max         = '100';
        newPercentInput.step        = '0.01';
        newPercentInput.placeholder = 'Percentage';

        // Get all userids that have been selected already
        var existingUserIds = getSelectedOrUsedUsers(transactionId);
        // Get all application users
        var users           = getAllUsers();
        for (var i = 0; i < users.length; i++) {
            var user = users[i];

            // Set up the new option with user info
            var newOption       = document.createElement('OPTION');
            newOption.innerHTML = user.DisplayName;
            setValue(newOption, user.Id.toString());
            newUserSelect.appendChild(newOption);

            // If the user isn't already used and the dropdown has no selected option,
            // set the value to the user we just added
            if (!isInList(user.Id, existingUserIds) && !newUserSelectHasValue) {
                setValue(newUserSelect, user.Id.toString());
                newUserSelectHasValue = true;
            }
        }
        newUserSelect.setAttribute('onchange', 'onchangeUserSelect(' + transactionId.toString() + ')');

        // Add all new elements to DOM
        newUserWithInputs.appendChild(newUserSelect);
        newUserWithInputs.appendChild(newPercentInput);
        userContainer.appendChild(newUserWithInputs);

        // Update all the options that the user has
        // (a new user was just added, so we want to remove that new user from their options)
        onchangeUserSelect(transactionId);

        // Change the add button from 'Add Involved Users' to just a '+'
        var addButton       = getElement('transaction_' + transactionId.toString() + '_add_btn');
        addButton.innerHTML = '+';

        // If we've selected all users, hide the add button
        if (users.length == existingUserIds.length + 1) {
            hide('transaction_' + transactionId + '_add_btn');
        }
    }

    function getSelectedOrUsedUsers(transactionId) {
        var existingUsers = getElementChildrenById('transactionusers_' + transactionId.toString());
        var userIds = [];
        // Get users that existed on page load
        for (var i = 0; i < existingUsers.length; i++) {
            var existingUser = existingUsers[i];
            user = existingUser.getElementsByClassName('userlabel');
            if (user.length != 1) { continue; }
            userIds.push(toInt(user[0].getAttribute('data-user')));
        }
        // Get users that were added after page load
        for (var i = 0; i < existingUsers.length; i++) {
            var existingUser = existingUsers[i];
            user = existingUser.getElementsByClassName('userinput');
            if (user.length != 1) { continue; }
            userIds.push(toInt(getValue(user[0])));
        }
        return userIds;
    }

    function onchangeUserSelect(transactionId) {
        // Get all users that are selected or populated
        var existingUserIds = getSelectedOrUsedUsers(transactionId);
        var existingUsers   = getElementChildrenById('transactionusers_' + transactionId.toString());

        // Loop over users that were added after page load
        for (var i = 0; i < existingUsers.length; i++) {
            var existingUser  = existingUsers[i];
            var currentSelect = existingUser.getElementsByClassName('userinput');
            if (currentSelect.length != 1) { continue; }

            // Process the current select
            currentSelect = currentSelect[0];
            // Get the options for the select
            var options = getElementChildren(currentSelect);
            for (var j = 0; j < options.length; j++) {
                var option = options[j];
                // We want to hide the option from the user if the user is currently used elsewhere
                // and the user we are inspecting is NOT already selected by this current dropdown
                if (getValue(currentSelect) != getValue(option) && isInList(toInt(getValue(option)), existingUserIds)) {
                    hideElem(option);
                } else {
                    showElem(option);
                }
            }
        }
    }
</script>